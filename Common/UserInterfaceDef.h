#pragma once

#include "Camera/CameraInterfaceDef.h"

#define	WM_NOTIFY_TRACK_CHANGE_RECT			(WM_USER+0x220)
#define	WM_NOTIFY_SELCHANGE_CAMERATREE		(WM_USER+0x221)
#define	WM_NOTIFY_CLEAR_DISPLAY				(WM_USER+0x222)
#define	WM_NOTIFY_UPDATE_LOGPATH			(WM_USER+0x223)

#define WM_NOTIFY_ZOOMIN					(WM_USER+0x230)
#define WM_NOTIFY_ZOOMOUT					(WM_USER+0x231)
#define WM_NOTIFY_ZOOMFIT					(WM_USER+0x232)
#define WM_NOTIFY_ZOOM100					(WM_USER+0x233)

#define WM_NOTIFY_EDIT						(WM_USER+0x240)
#define WM_NOTIFY_GRAB						(WM_USER+0x241)
#define WM_NOTIFY_GRABEDIT					(WM_USER+0x242)
#define WM_NOTIFY_STROBE					(WM_USER+0x243)

#define WM_NOTIFY_SEQUENCE_BEGIN			(WM_USER+0x250)
#define WM_NOTIFY_SEQUENCE_END				(WM_USER+0x251)
#define WM_NOTIFY_SEQUENCE_REQUESET			(WM_USER+0x252)
#define WM_NOTIFY_SEQUENCE_EDIT_STEPDONE	(WM_USER+0x253)
// Version 1.3.7.8
#define WM_NOTIFY_SEQUENCE_REQUESET_FIRST	(WM_USER+0x254)

#define WM_NOTIFY_STEPSIZE_ROI_SELECTED		(WM_USER+0x260)
#define WM_NOTIFY_STEPSIZE_ROI_CHANGED		(WM_USER+0x261)


#define WM_NOTIFY_CHECK_INSPECTIONENV_READY	(WM_USER+0x262)



// Tree
typedef enum
{
	TYPE_TREELEVEL_NONE,

	TYPE_TREELEVEL_ROOT,

	TYPE_TREELEVEL_GIGE_IF,
	TYPE_TREELEVEL_GIGE_CAMERA,

	TYPE_TREELEVEL_ETHERNET_IF,
	TYPE_TREELEVEL_ETHERNET_CAMERA,

	TYPE_TREELEVEL_USB_IF,
	TYPE_TREELEVEL_USB_CAMERA,

	TYPE_TREELEVEL_CAMERALINK_IF,
	TYPE_TREELEVEL_CAMERALINK_CAMERA,

	TYPE_TREELEVEL_OTHER_BASLER,
	TYPE_TREELEVEL_OTHER_BASLER_GIGE_IF,
	TYPE_TREELEVEL_OTHER_BASLER_GIGE,
	TYPE_TREELEVEL_OTHER_BASLER_USB_IF,
	TYPE_TREELEVEL_OTHER_BASLER_USB,

	// Emul: File camera
	TYPE_TREELEVEL_FILE_IF,
	TYPE_TREELEVEL_FILE_CAMERA,

} TYPE_TREELEVEL;


// Tree
typedef struct _INFO_TREELEVEL
{
	_INFO_TREELEVEL()
	{
		m_eTreeLevel= TYPE_TREELEVEL_NONE;
		m_nIdx		= 0;

		m_pstDevice = NULL;
		m_pChildDoc = NULL;
	}

	_INFO_TREELEVEL(TYPE_TREELEVEL eLevel, int nIdx = 0, INFO_CONNECT_DEV* pDev = NULL)
	{
		m_eTreeLevel= eLevel;
		m_nIdx		= nIdx;

		m_pstDevice = NULL;
		m_pChildDoc = NULL;

		if (pDev)
		{
			m_pstDevice = pDev;
		}
	}

	TYPE_TREELEVEL		m_eTreeLevel;
	int	m_nIdx;

	INFO_CONNECT_DEV*	m_pstDevice;
	CDocument*			m_pChildDoc;

} INFO_TREELEVEL;

